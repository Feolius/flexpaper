<?php

function flexpaper_menu() {
  $items['admin/config/flexpaper'] = array(
    'title' => 'Flexpaper settings',
    'description' => 'Gloabal settings for flexpaper module',
    'page callback' => 'drupal_get_form',
    'access arguments' => array('administer site configuration'),
    'page arguments' => array('flexpaper_settings_page_form'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

function flexpaper_settings_page_form($form, &$form_state) {
  if (empty($form_state['input'])) {
    if (!flexpaper_pdf2swfEnabled(variable_get('path_to_pdf2swf', 'pdf2swf'))) {
      drupal_set_message('Path to pdf2swf tool is not properly set', 'warning');
    }
    else {
      drupal_set_message('Path to pdf2swf tool is working properly, and you don\'t need to set path to it');
    }

    if (!flexpaper_pdf2jsonEnabled(variable_get('path_to_pdf2json', 'pdf2json'))) {
      drupal_set_message('Path to pdf2json tool is not properly set', 'warning');
    }
    else {
      drupal_set_message('Path to pdf2json tool is working properly, and you don\'t need to set path to it');
    }
  }
  $form['path_to_pdf2swf'] = array(
    '#type' => 'textfield',
    '#title' => t('Path to pdf2swf'),
    '#default_value' => variable_get('path_to_pdf2swf', 'pdf2swf'),
    '#size' => 100,
    '#maxlength' => 300,
  );
  $form['path_to_pdf2json'] = array(
    '#type' => 'textfield',
    '#title' => t('Flexpaper key'),
    '#default_value' => variable_get('path_to_pdf2json', 'pdf2json'),
    '#size' => 100,
    '#maxlength' => 300,
  );
  return system_settings_form($form);
}

/**
 * Implements hook_permission().
 */
function flexpaper_permission() {
  return array(
    'generate swf files' => array(
      'title' => t('Generate swf files'),
      'description' => t(' Generate swf files from pdf.'),
    ),
  );
}

/**
 * Implements hook_field_formatter_info().
 */
function flexpaper_field_formatter_info() {
  //@TODO We need to add settings here
  return array(
    'flexpaper_formatter' => array(
      'label' => t('Flexpaper formatter'),
      'descrition' => 'Provides a way to show pdf files using flexpaper',
      'field types' => array('file'),
      'settings' => array(
        'page_loading_mode' => 'split',
        'scale' => 0.6,
        'zoom_transition' => 'easeOut',
        'zoom_time' => 0.5,
        'zoom_interval' => 0.2,
        'fit_page_on_load' => FALSE,
        'fit_width_on_load' => TRUE,
        'full_screen_as_max_window' => FALSE,
        'progressive_loading' => FALSE,
        'min_zoom_size' => 0.2,
        'max_zoom_size' => 0.5,
        'search_match_all' => FALSE,
        'init_view_mode' => 'Portrait',
        'view_mode_tools_visible' => TRUE,
        'zoom_tools_visible' => TRUE,
        'nav_tools_visible' => TRUE,
        'cursor_tools_visible' => TRUE,
        'search_tools_visible' => TRUE,

      )
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function flexpaper_field_formatter_settings_summary($field, $instance, $view_mode) {
  $summary = '';
  $display = $instance['display'][$view_mode];
  if ($display['type'] = 'flexpaper_formatter') {
    //@TODO Maybe we need to change label
    $summary = t('Click to change flexpaper settings');
  }
  return $summary;
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function flexpaper_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $element = array();
  if ($display['type'] == 'flexpaper_formatter') {
    $element['page_loading_mode'] = array(
      '#type' => 'select',
      '#title' => t('Page loading mode'),
      '#options' => array(
        'split' => t('Split'),
        'one file' => t('One file')
      ),
      '#default_value' => $settings['page_loading_mode'],
      '#description' => t("You can select how your documents will be loaded. If you choose split mode, flexpaer will download other pages when needed. It's preferable for large pdfs.")
    );
    $element['scale'] = array(
      '#type' => 'textfield',
      '#title' => t('Scale'),
      '#default_value' => $settings['scale'],
      '#required' => TRUE,
    );
    //@TODO not all possible Tweener zoom transition elements are added here
    $element['zoom_transition'] = array(
      '#type' => 'select',
      '#title' => t('Page loading mode'),
      '#options' => array(
        'easeOut' => t('easeOut'),
        'linear' => t('linear'),
        'easenone' => t('easenone'),
        'easeInSine'=> t('easeInSine'),
        'easeOutQuad' => t('easeOutQuad')
      ),
      '#default_value' => $settings['zoom_transition']
    );
    $element['zoom_time'] = array(
      '#type' => 'textfield',
      '#title' => t('Zoom time'),
      '#default_value' => $settings['zoom_time'],
      '#required' => TRUE,
    );
    $element['zoom_interval'] = array(
      '#type' => 'textfield',
      '#title' => t('Zoom interval'),
      '#default_value' => $settings['zoom_interval'],
      '#required' => TRUE,
    );
    $element['fit_page_on_load'] = array(
      '#type' => 'checkbox',
      '#title' => t('Fit page on load'),
      '#default_value' => $settings['fit_page_on_load']
    );
    $element['fit_width_on_load'] = array(
      '#type' => 'checkbox',
      '#title' => t('Fit width on load'),
      '#default_value' => $settings['fit_width_on_load']
    );
    $element['full_screen_as_max_window'] = array(
      '#type' => 'checkbox',
      '#title' => t('Use full screen as max window'),
      '#default_value' => $settings['full_screen_as_max_window']
    );
    $element['progressive_loading'] = array(
      '#type' => 'checkbox',
      '#title' => t('Progressive loading'),
      '#default_value' => $settings['progressive_loading']
    );
    $element['min_zoom_size'] = array(
      '#type' => 'textfield',
      '#title' => t('Min zoom size'),
      '#default_value' => $settings['min_zoom_size'],
      '#required' => TRUE,
    );
    $element['max_zoom_size'] = array(
      '#type' => 'textfield',
      '#title' => t('Max zoom size'),
      '#default_value' => $settings['max_zoom_size'],
      '#required' => TRUE,
    );
    $element['search_match_all'] = array(
      '#type' => 'checkbox',
      '#title' => t('Search match all'),
      '#default_value' => $settings['search_match_all']
    );
    $element['init_view_mode'] = array(
      '#type' => 'select',
      '#title' => t('Initial view mode'),
      '#options' => array(
        'Portrait' => t('Portrait'),
        'TwoPages' => t('TwoPages'),
        'Tile' => t('Tile')
      ),
      '#default_value' => $settings['init_view_mode'],
    );
    $element['tools_settings'] = array(
      '#type' => 'fieldset',
      '#title' => t('Toolbar settings'),
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
    );
    $element['tools_settings']['view_mode_tools_visible'] = array(
      '#type' => 'checkbox',
      '#title' => t('View mode selector visible'),
      '#default_value' => $settings['view_mode_tools_visible']
    );
    $element['tools_settings']['zoom_tools_visible'] = array(
      '#type' => 'checkbox',
      '#title' => t('Zoom tools visible'),
      '#default_value' => $settings['zoom_tools_visible']
    );
    $element['tools_settings']['nav_tools_visible'] = array(
      '#type' => 'checkbox',
      '#title' => t('Navigation tools visible'),
      '#default_value' => $settings['nav_tools_visible']
    );
    $element['tools_settings']['cursor_tools_visible'] = array(
      '#type' => 'checkbox',
      '#title' => t('Cursor tools visible'),
      '#default_value' => $settings['cursor_tools_visible']
    );
    $element['tools_settings']['search_tools_visible'] = array(
      '#type' => 'checkbox',
      '#title' => t('Search tools visible'),
      '#default_value' => $settings['search_tools_visible']
    );

  }
  return $element;
}

/**
 * Implements hook_field_formatter_view().
 */
function flexpaper_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  global $base_url;
  $element = array();
  if ($display['type'] == 'flexpaper_formatter') {
    $files = array();
    foreach ($items as $delta => $item) {
      if ($file = file_load($item['fid'])) {
        $files[] = $file;
      }
    }
    //Check if all files have corresponding swfs
    $status = flexpaper_check_files_status($files);
    if (!empty($status)) {
      $settings = $display['settings'];
      //Flexpaper settings
      $js_settings['scale'] = $settings['scale'];
      $js_settings['zoomTransition'] = $settings['zoom_transition'];
      $js_settings['zoomTime'] = $settings['zoom_time'];
      $js_settings['zoomInterval'] = $settings['zoom_interval'];
      $js_settings['fitPageOnLoad'] = $settings['fit_page_on_load'];
      $js_settings['fullScreenAsMaxWindow'] = $settings['full_screen_as_max_window'];
      $js_settings['progressiveLoading'] = $settings['progressive_loading'];
      $js_settings['minZoomSize'] = $settings['min_zoom_size'];
      $js_settings['maxZoomSize'] = $settings['max_zoom_size'];
      $js_settings['searchMatchAll'] = $settings['search_match_all'];
      $js_settings['initViewMode'] = $settings['init_view_mode'];
      $js_settings['viewModeToolsVisible'] = $settings['view_mode_tools_visible'];
      $js_settings['zoomToolsVisible'] = $settings['zoom_tools_visible'];
      $js_settings['cursorToolsVisible'] = $settings['cursor_tools_visible'];
      $js_settings['navToolsVisible'] = $settings['nav_tools_visible'];
      $js_settings['searchToolsVisible'] = $settings['search_tools_visible'];

      $library_path = libraries_get_path('flexpaper');
      $js_settings['jsDirectory'] = $base_url . '/'. $library_path . '/js/';
      foreach ($status as $fid => $conversion_done) {
        if ($conversion_done) {
          $folder_url = file_create_url('public://flexpaper/' . $fid . '_files');
          $files_directory_info = & drupal_static('flexpaper_files_directory_info');
          $files_arr = $files_directory_info[$fid];
          if($settings['page_loading_mode'] == 'split'){
            $swf_number = count($files_arr) - 3;
            $js_settings['paths'][] = $folder_url . '/{' . $fid . '_[*,0].swf,' . $swf_number . '}';
          }else{
            $js_settings['paths'][] = $folder_url . '/' . $fid . '.swf';
          }
          $element[$delta] = array(
            '#theme' => 'flexpaper_container'
          );
          //Check if we have json
          if (in_array($fid . '.js', $files_arr)) {
            $js_settings['jsonFiles'][] = $folder_url . '/' . $fid . '.js';
          }else{
            $js_settings['jsonFiles'][] = '';
          }
        }
        else {
          //@TODO Show file link or smth else or maybe remove it at all
        }
      }
      drupal_add_js($library_path . '/js/flexpaper.js');
      drupal_add_js($library_path . '/js/flexpaper_handlers.js');
      drupal_add_css($library_path . '/css/flexpaper.css');
      drupal_add_css(drupal_get_path('module', 'flexpaper') . '/css/flexpaper.css');
      drupal_add_js(drupal_get_path('module', 'flexpaper') . '/flexpaper_init.js');
      drupal_add_js(array('flexpaper' => $js_settings), 'setting');
    }
  }
  return $element;
}

/**
 * Check if each file with fid from given array has corresponding swf files
 */
function flexpaper_check_files_status($files) {
  $status = array();
  $batch = array(
    'title' => t('Generating swf files'),
    'operations' => array()
  );
  foreach ($files as $file) {
    if ($file->filemime = 'application/pdf') {
      $files_directory = 'public://flexpaper/' . $file->fid . '_files';
      if (!file_prepare_directory($files_directory)) {
        $status[$file->fid] = FALSE;
        $batch['operations'][] = array('flexpaper_generate_swfs_batch_process', array($file));
      }
      else {
        //Assume that if main swf file is in place, everything is good.
        $files_arr = scandir(drupal_realpath($files_directory));
        //Put it in static cache, because we need it later
        $files_directory_info = & drupal_static('flexpaper_files_directory_info');
        $files_directory_info[$file->fid] = $files_arr;
        if (in_array($file->fid . '.swf', $files_arr)) {
          $status[$file->fid] = TRUE;
        }else{
          $status[$file->fid] = FALSE;
        }
      }
    }
    else {
      $status[$file->fid] = FALSE;
    }
  }
  if (count($batch['operations']) > 0 && user_access('generate swf files')) {
    batch_set($batch);
    batch_process();
  }
  return $status;
}

/**
 * Flexpaper processor - Batch API process callback.
 */

function flexpaper_generate_swfs_batch_process($file, &$context){
  $fid = $file->fid;
  $pdf_path = drupal_realpath($file->uri);
  $files_directory = drupal_realpath(file_default_scheme() .'://') . '/flexpaper/' . $fid . '_files';
  if(empty($context['sandbox'])){
    $context['sandbox']['progress'] = 0;
    //@TODO Check if function return proper number of pages
    $context['sandbox']['max'] = _flexpaper_get_pdf_pages_number(drupal_realpath($file->uri)) + 1;
    $context['sandbox']['last_swf'] = FALSE;
    $context['sandbox']['error'] = FALSE;
    file_prepare_directory($files_directory, FILE_CREATE_DIRECTORY);
  }
  if (!$context['sandbox']['last_swf']) {
    $first_page_number = $context['sandbox']['progress'] + 1;
    $last_page_number = $context['sandbox']['progress'] + 5;
    $command = variable_get('path_to_pdf2swf', 'pdf2swf') . " '" . $pdf_path . "' -o '" . $files_directory . '/' . $fid . "_%.swf' -p " . $first_page_number . "-" . $last_page_number . " -f -T 9 -t -s storeallcharacters";
    $output = shell_exec(($command));
    $pattern = '/(FATAL|ERROR)/i';
    preg_match($pattern, $output, $m);
    if (!empty($m)) {
      //Error in conversion
      watchdog('flexpaper', 'Error in conversion pdf to swf process. Log info: %info', array('%info' => $output), WATCHDOG_ERROR);
      $context['sandbox']['error'] = TRUE;
    }
    else {
      $context['sandbox']['progress'] = $last_page_number;
    }
  }
  if (!$context['sandbox']['error']) {
    if ($context['sandbox']['progress'] < $context['sandbox']['max'] - 1) {
      $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
      $context['message'] = $context['sandbox']['progress'] . ' of ' . $context['sandbox']['max'] . ' files are processed';
    }
    elseif ($context['sandbox']['last_swf'] == FALSE) {
      $context['finished'] = ($context['sandbox']['max'] - 1) / $context['sandbox']['max'];
      $context['sandbox']['last_swf'] = TRUE;
      $context['message'] = 'Last swf is processing';
    }
    else {
      //Create common swf
      $command = variable_get('path_to_pdf2swf', 'pdf2swf') . " '" . $pdf_path . "' -o '" . $files_directory . '/' . $fid . ".swf' -f -T 9 -t -s storeallcharacters";
      exec($command);
      //Create json file if pdf2json is available
      $command = variable_get('path_to_pdf2json', 'pdf2json') . " '" . $pdf_path . "' -enc UTF-8 -compress -hidden '" . $files_directory . "/" . $fid . ".js'";
      exec($command);
      $context['message'] = $context['sandbox']['max'] . ' of ' . $context['sandbox']['max'] . ' files are processed';
      $context['finished'] = 1;
    }
  }
  else {
    $context['finished'] = 1;
  }
}

/**
 * Remove special characters that prevent flexpaper work
 */
function _flexpaper_remove_special_chars($string) {
  $string = str_replace('?', '', $string);
  $string = str_replace('#', '', $string);
  $string = str_replace('&', '', $string);
  return $string;
}


/**
 * Implements hook_theme().
 */
function flexpaper_theme() {
  return array(
    'flexpaper_container' => array(
      'template' => 'theme/flexpaper-container',
      'variables' => array()
    )
  );
}

/**
 * Theme function for the flexpaper formatter.
 */
function theme_flexpaper_view() {
  return '<div class="flexpaper_viewer_container">
  <div class="flexpaper_viewer" style="width:770px;height:500px">File is downloading...</div>
</div>';
}

/**
 * Get real file name without suffix
 */
function get_real_file_name($file) {
  $uri = $file->uri;
  $real_file_name = drupal_basename($uri);

  $arr = explode('.', $real_file_name);
  $arr_length = count($arr);
  if ($arr_length > 1) {
    //Exclude name of file extension
    unset($arr[$arr_length - 1]);
    $real_file_name = implode('.', $arr);
  }
  else {
    $real_file_name = $arr[0];
  }
  return $real_file_name;
}

/**
 * Count number of pages in PDF file
 */
function _flexpaper_get_pdf_pages_number($filepath) {
  $stream = @fopen($filepath, "r");
  $PDFContent = @fread($stream, filesize($filepath));
  $firstValue = 0;
  $secondValue = 0;
  if (preg_match("/\/N\s+([0-9]+)/", $PDFContent, $matches)) {
    $firstValue = $matches[1];
  }

  if (preg_match_all("/\/Count\s+([0-9]+)/s", $PDFContent, $matches)) {
    $secondValue = max($matches[1]);
  }
  $max = (($secondValue != 0) ? $secondValue : max($firstValue, $secondValue));
  fclose($stream);
  //@TODO check if PHP imagemagick extension is installed DONE?
  if ($max == 0) {
    if (extension_loaded('imagick')) {
      $im = new imagick($filepath);
      $max = $im->getNumberImages();
    }
  }
  return $max;
}

function flexpaper_pdf2swfEnabled($path_to_pdf2swf){
  try {
    if (function_exists('exec') && (DIRECTORY_SEPARATOR == '/' || (DIRECTORY_SEPARATOR == '\\' && $path_to_pdf2swf != 'pdf2swf'))) {
      if(	PHP_OS == "WIN32" || PHP_OS == "WINNT"	){
        exec('"' . $path_to_pdf2swf . '"' . ' --version 2>&1', $out);
      }else{
        exec($path_to_pdf2swf . ' --version 2>&1', $out);
      }
      if (empty($out)) {
        return false;
      } else {
        if (strpos($out[0], 'swftools') !== false) {
          return true;
        } else {
          return false;
        }
      }
    } else {
      return false;
    }
  }catch (Exception $ex) {return false;}
}

function flexpaper_pdf2jsonEnabled($path_to_pdf2json){
  try{
    if (function_exists('exec') && (DIRECTORY_SEPARATOR == '/' || (DIRECTORY_SEPARATOR == '\\' && $path_to_pdf2json != 'pdf2json'))) {
      if(	PHP_OS == "WIN32" || PHP_OS == "WINNT"	){
        exec('"' . $path_to_pdf2json . '"' . ' -help 2>&1', $out);
      }else{
        exec($path_to_pdf2json . ' -help 2>&1', $out);
      }
      if (empty($out)) {
        return false;
      } else {
        if (strpos($out[0], 'devaldi') !== false) {
          return true;
        } else {
          return false;
        }
      }
    } else {
      return false;
    }
  }catch (Exception $ex) {return false;}
}