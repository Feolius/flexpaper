<?php
function flexpaper_menu() {
  $items['admin/config/flexpaper'] = array(
    'title' => 'Flexpaper settings',
    'description' => 'Gloabal settings for flexpaper module',
    'page callback' => 'flexpaper_settings_page',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

function flexpaper_settings_page() {
  return drupal_get_form('flexpaper_settings_page_form');
}
function flexpaper_settings_page_form($form, &$form_state) {
  $form['flexpaper_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Flexpaper key'),
    '#default_value' => variable_get('flexpaper_key', ''),
    '#size' => 60,
    '#maxlength' => 200,
    '#required' => TRUE,
  );
  $form['submit'] = array('#type' => 'submit', '#value' => t('Save settings'));
  return $form;
}
/**
 * Implements hook_permission().
 */
function flexpaper_permission() {
  return array(
    'generate swf files' => array(
      'title' => t('Generate swf files'),
      'description' => t(' Generate swf files from pdf.'),
    ),
  );
}

/**
 * Implements hook_field_formatter_info().
 */
function flexpaper_field_formatter_info() {
  //@TODO We need to add settings here
  return array(
    'flexpaper_formatter' => array(
      'label' => t('Flexpaper formatter'),
      'descrition' => 'Provides a way to show pdf files using flexpaper',
      'field types' => array('file'),
      'settings' => array()
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function flexpaper_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  global $base_url;
  $element = array();
  if($display['type'] == 'flexpaper_formatter'){
    $files = array();
    foreach ($items as $delta => $item) {
      if($file = file_load($item['fid'])){
        $files[] = $file;
      }
    }
    //Check if all files have corresponding swfs
    $status = flexpaper_check_files_status($files);
    dpm($status);
    foreach ($status as $fid => $conversion_done) {
      if($conversion_done){
        //@TODO Show flexpaper instance here
      }else{
        //@TODO Show file link or smth else
      }
    }
  }
//  if ($display['type'] == 'book_field_formatter') {
//    foreach ($items as $delta => $item) {
//
//      //If swf files was created, we should show it in flexpaper.
//      if ($item['conversion_done'] != 0) {
//        $module_path = drupal_get_path('module', 'flexpaper');
//        $FlexPaperViewerPath = $base_url . '/' . $module_path . '/FlexPaperViewer';
//        $file = file_load($item['fid']);
//        $file_name = get_real_file_name($file);
//        $swf_directory = file_default_scheme() . '://books/' . $item['folder_name'];
//        $path = drupal_realpath($swf_directory);
//        $drupal_folder = realpath('.');
//        $relative_path = str_replace($drupal_folder, "", $path);
//        $files = scandir($path);
//        if (isset($item['fid_thumb'])) {
//          $num_of_swfs = count($files) - 4;
//        }
//        else {
//          $num_of_swfs = count($files) - 3;
//        }
//
//        $swf_path = '{' . $base_url . $relative_path . '/' . $file_name . '[*,0].swf,' . $num_of_swfs . '}';
//
//        $settings = array(
//          'paths' => array($swf_path),
//          'FlexPaperViewerPath' => $FlexPaperViewerPath,
//        );
//
//        //Determine if we need highlighting
//        if (isset($_GET['query'])) {
//          $query = $_GET['query'];
//          $query_parts = explode(' AND ', $query);
//          foreach ($query_parts as $query_part) {
//            $query_part_arr = explode(':', $query_part);
//            if (count($query_part_arr) == 1) {
//              $main_query = $query_part_arr[0];
//            }
//          }
//        }
//        //Add buttons that allow to jump by terms
//        $buttons = array();
//        if (!empty($main_query)) {
//          if (substr($main_query, 0, 1) == '"' && substr($main_query, -1) == '"') {
//            //We need only one button if user want to see the whole string
//            $main_query = substr($main_query, 1);
//            $main_query = substr($main_query, 0, -1);
//            $settings['search'] = $main_query;
//          }
//          else {
//            //We should divide string and make button for each word
//            $terms = explode(' ', $main_query);
//            if (count($terms) > 1) {
//              foreach ($terms as $term) {
//                $buttons[$term . '_button'] = array(
//                  '#type' => 'button',
//                  '#value' => $term,
//                  '#attributes' => array(
//                    'class' => array('flexpaper-highlight-button')
//                  )
//                );
//              }
//            }
//          }
//          $buttons['search_string_button'] = array(
//            '#type' => 'button',
//            '#value' => $main_query,
//            '#attributes' => array(
//              'class' => array('flexpaper-highlight-button')
//            )
//          );
//          $settings['search'] = $main_query;
//        }
//        $element[$delta] = array(
//          'flexpaper' => array(
//            '#attached' => array(
//              'css' => array($module_path . '/flexpaper.css'),
//              'js' => array($module_path . '/flexpaper_flash.js', $module_path . '/flexpaper.js'),
//            ),
//            '#theme' => 'flexpaper_view',
//            '#file' => $file,
//          )
//        );
//        if (module_exists('book_thumbnail') && ($file_thumb = file_load($item['fid_thumb']))) {
//          $element[$delta]['flexpaper']['#file_thumb'] = $file_thumb;
//        }
//        $element[$delta] = array_merge($buttons, $element[$delta]);
//        drupal_add_js(array('flexpaper' => $settings), 'setting');
//      }
//      elseif ($item['fid'] != 0) {
//        $file = file_load($item['fid']);
//        if (module_exists('book_thumbnail') && ($file_thumb = file_load($item['fid_thumb']))) {
//          $element[$delta]['#file_thumb'] = $file_thumb;
//        }
//        $element[$delta] = array(
//          '#theme' => 'flexpaper_google_doc_view',
//          '#file' => $file,
//        );
//      }
//    }
//  }
  return $element;
}

/**
 * Check if each file with fid from given array has corresponding swf files
 */
function flexpaper_check_files_status($files){
  $status = array();
  $batch = array(
    'title' => t('Generating swf files'),
    'operations' => array()
  );
  foreach($files as $file){
    if ($file->filemime = 'application/pdf'){
      $files_directory = 'public://flexpaper/' . $file->fid . '_files';
      if (!file_prepare_directory($files_directory)) {
        $status[$file->fid] = FALSE;
        $batch['operations'][] = array('flexpaper_generate_swfs_batch_process', array($file));
      }else{
        $pages_number = _flexpaper_get_pdf_pages_number(drupal_realpath($file->uri));
        $files_arr = scandir(drupal_realpath($files_directory));
        if((count($files_arr) - 2) == ($pages_number + 1)){
          $status[$file->fid] = TRUE;
        }else{
          $status[$file->fid] = FALSE;
        }
      }
    }else{
      $status[$file->fid] = FALSE;
    }
  }
  if (count($batch['operations']) > 0 && user_access('generate swf files'))  {
    batch_set($batch);
    batch_process();
  }
  return $status;
}

/**
 * Flexpaper processor - Batch API process callback.
 */
function flexpaper_generate_swfs_batch_process($file, &$context){
  $fid = $file->fid;
  $pdf_path = drupal_realpath($file->uri);
  $files_directory = drupal_realpath('public://') . '/flexpaper/' . $fid . '_files';
  if(empty($context['sandbox'])){
    $context['sandbox']['progress'] = 0;
    $context['sandbox']['max'] = _flexpaper_get_pdf_pages_number(drupal_realpath($file->uri)) + 1;
    $context['sandbox']['last_swf'] = FALSE;
    $context['sandbox']['error'] = FALSE;
    file_prepare_directory($files_directory, FILE_CREATE_DIRECTORY);
  }
  //@TODO Check if PHP can execute commands
  if(!$context['sandbox']['last_swf']){
    $first_page_number = $context['sandbox']['progress'] + 1;
    $last_page_number = $context['sandbox']['progress'] + 5;
    $command = "pdf2swf '" . $pdf_path . "' -o '" . $files_directory . '/' . $fid . "_%.swf' -p " . $first_page_number . "-" . $last_page_number . " -f -T 9 -t -s storeallcharacters";
    $output = shell_exec(($command));
    $pattern = '/(FATAL|ERROR)/i';
    preg_match($pattern, $output, $m);
    if (!empty($m)) {
      //Error in conversion
      //@TODO check how batch API can handle the errors
      $context['sandbox']['error'] = TRUE;
    }else{
      $context['sandbox']['progress'] = $last_page_number;
    }
  }
  if(!$context['sandbox']['error']){
    if($context['sandbox']['progress'] < $context['sandbox']['max'] - 1){
      $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
      $context['message'] = $context['sandbox']['progress'] . ' of ' . $context['sandbox']['max'] . ' files are processed';
    }elseif($context['sandbox']['last_swf'] == FALSE){
      $context['finished'] = ($context['sandbox']['max'] - 1) / $context['sandbox']['max'];
      $context['sandbox']['last_swf'] = TRUE;
      $context['message'] = 'Last swf is processing';
    }else{
      //Create common swf
      $command = "pdf2swf '" . $pdf_path . "' -o '" . $files_directory . '/' . $fid . ".swf' -f -T 9 -t -s storeallcharacters";
      exec($command);
      $context['message'] = $context['sandbox']['max'] . ' of ' . $context['sandbox']['max'] . ' files are processed';
      $context['finished'] = 1;
    }
  }else{
    $context['finished'] = 1;
  }
}

/**
 * Remove special characters that prevent flexpaper work
 */
function _flexpaper_remove_special_chars($string) {
  $string = str_replace('?', '', $string);
  $string = str_replace('#', '', $string);
  $string = str_replace('&', '', $string);
  return $string;
}


/**
 * Implements hook_theme().
 */
function flexpaper_theme() {
  return array(
    'flexpaper_view' => array(
      'variables' => array('file' => NULL, 'file_swf' => NULL, 'file_thumb' => NULL, 'icon_directory' => NULL),
    ),
    'flexpaper_google_doc_view' => array(
      'variables' => array('file' => NULL, 'file_thumb' => NULL, 'icon_directory' => NULL),
    ),
  );
}

/**
 * Theme function for the flexpaper formatter.
 */
function theme_flexpaper_view($variables) {
  $file = (object) $variables['file'];
  $file_thumb = (object) $variables['file_thumb'];
  $out = '<p class = "viewerPlaceHolder">Document loading..</p>';
  if (!empty($file_thumb)) {
    $uri = $file->uri;
    $uri_thumb = $file_thumb->uri;
    $style = 'compressing';
    $text = '<img src="' . image_style_url($style, $uri_thumb) . '">';
    $options['html'] = TRUE;
    $out = $out . '<h1>' . $file->filename . '</h1>' . l($text, file_create_url($uri), $options);
  }
  else {
    $out = $out . theme_file_link($variables);
  }
  return $out;
}

/**
 * Get real file name without suffix
 */
function get_real_file_name($file) {
  $uri = $file->uri;
  $real_file_name = drupal_basename($uri);

  $arr = explode('.', $real_file_name);
  $arr_length = count($arr);
  if ($arr_length > 1) {
    //Exclude name of file extension
    unset($arr[$arr_length - 1]);
    $real_file_name = implode('.', $arr);
  }
  else {
    $real_file_name = $arr[0];
  }
  return $real_file_name;
}

/**
 * Count number of pages in PDF file
 */
function _flexpaper_get_pdf_pages_number($filepath) {
  $stream = @fopen($filepath, "r");
  $PDFContent = @fread($stream, filesize($filepath));
  $firstValue = 0;
  $secondValue = 0;
  if (preg_match("/\/N\s+([0-9]+)/", $PDFContent, $matches)) {
    $firstValue = $matches[1];
  }

  if (preg_match_all("/\/Count\s+([0-9]+)/s", $PDFContent, $matches)) {
    $secondValue = max($matches[1]);
  }
  $max = (($secondValue != 0) ? $secondValue : max($firstValue, $secondValue));
  fclose($stream);
  //@TODO check if PHP imagemagick extension is installed
  if ($max == 0) {
    $im = new imagick($filepath);
    $max = $im->getNumberImages();
  }
  return $max;
}